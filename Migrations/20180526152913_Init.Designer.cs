// <auto-generated />
using ERPAPI.Data;
using ERPAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace ERPAPI.Migrations
{
    [DbContext(typeof(ERPContext))]
    [Migration("20180526152913_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ERPAPI.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountType");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<Guid>("CurrencyId");

                    b.Property<Guid?>("CustomerId");

                    b.Property<int>("DirectionType");

                    b.Property<int>("EntityStatus");

                    b.Property<Guid?>("FinalAccountId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Note");

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ParentId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FinalAccountId");

                    b.HasIndex("ParentId");

                    b.ToTable("Accounts","Accounting");
                });

            modelBuilder.Entity("ERPAPI.Models.AccountBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AccountId");

                    b.Property<double>("Credit");

                    b.Property<double>("Debit");

                    b.Property<Guid>("FinancialPeriodId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("FinancialPeriodId");

                    b.ToTable("AccountBalances","Accounting");
                });

            modelBuilder.Entity("ERPAPI.Models.AuthClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("AllowedOrigin")
                        .HasMaxLength(100);

                    b.Property<int>("ApplicationType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("RefreshTokenLifeTime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Secret");

                    b.HasKey("Id");

                    b.ToTable("AuthClients","CMS");
                });

            modelBuilder.Entity("ERPAPI.Models.AuthRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId");

                    b.Property<DateTimeOffset>("Expires");

                    b.Property<bool>("IsActive");

                    b.Property<DateTimeOffset>("Issued");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AuthRefreshTokens","CMS");
                });

            modelBuilder.Entity("ERPAPI.Models.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AccountId");

                    b.Property<Guid>("BillTypeId");

                    b.Property<Guid?>("BranchId");

                    b.Property<Guid?>("CostCenterId");

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<Guid>("CurrencyId");

                    b.Property<double>("CurrencyValue");

                    b.Property<Guid?>("CustomerAccountId");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(128);

                    b.Property<DateTimeOffset>("Date");

                    b.Property<double>("Disc");

                    b.Property<int>("EntityStatus");

                    b.Property<double>("Extra");

                    b.Property<Guid>("FinancialPeriodId");

                    b.Property<bool>("IsEntryGenerated");

                    b.Property<bool>("IsPosted");

                    b.Property<bool>("IsPrinted");

                    b.Property<string>("Note");

                    b.Property<long>("Number");

                    b.Property<int>("PayType");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("StoreId");

                    b.Property<double>("Total");

                    b.Property<double>("TotalPaid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerAccountId");

                    b.HasIndex("FinancialPeriodId");

                    b.HasIndex("StoreId");

                    b.HasIndex("BillTypeId", "Number", "FinancialPeriodId")
                        .IsUnique();

                    b.ToTable("Bills","Accounting");
                });

            modelBuilder.Entity("ERPAPI.Models.BillEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BillId");

                    b.Property<Guid>("EntryId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("BillId")
                        .IsUnique();

                    b.HasIndex("EntryId")
                        .IsUnique();

                    b.ToTable("BillEntries","Accounting");
                });

            modelBuilder.Entity("ERPAPI.Models.BillEntryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AccountId");

                    b.Property<Guid>("BillId");

                    b.Property<Guid?>("CostCenterId");

                    b.Property<double>("Credit");

                    b.Property<Guid>("CurrencyId");

                    b.Property<double>("CurrencyValue");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<double>("Debit");

                    b.Property<string>("Note");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BillId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("BillEntryItems","Accounting");
                });

            modelBuilder.Entity("ERPAPI.Models.BillItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BillId");

                    b.Property<Guid?>("CostCenterId");

                    b.Property<double>("Disc");

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<double>("Extra");

                    b.Property<Guid>("ItemUnitId");

                    b.Property<string>("Note");

                    b.Property<double>("Price");

                    b.Property<DateTime?>("ProductionDate");

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("ItemUnitId");

                    b.HasIndex("StoreId");

                    b.HasIndex("BillId", "ItemUnitId", "StoreId")
                        .IsUnique();

                    b.ToTable("BillItems","Accounting");
                });

            modelBuilder.Entity("ERPAPI.Models.BillSeller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BillId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("SellerId");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.HasIndex("BillId", "SellerId")
                        .IsUnique();

                    b.ToTable("BillSellers","Accounting");
                });

            modelBuilder.Entity("ERPAPI.Models.BillType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AutoGenerateEntry");

                    b.Property<bool>("AutoPostEntryToAccounts");

                    b.Property<bool>("AutoPostToStores");

                    b.Property<short>("BillInOut");

                    b.Property<int>("BillTypeOrder");

                    b.Property<bool>("CanEditItemPrice");

                    b.Property<bool>("CanEditItemTotalPrice");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("Color1");

                    b.Property<int?>("Color2");

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<Guid?>("DefaultBranchId");

                    b.Property<Guid?>("DefaultCashAccountId");

                    b.Property<Guid?>("DefaultCostCenterId");

                    b.Property<Guid?>("DefaultCurrencyId");

                    b.Property<Guid?>("DefaultDiscAccountId");

                    b.Property<Guid?>("DefaultExtraAccountId");

                    b.Property<Guid?>("DefaultItemsAccountId");

                    b.Property<int>("DefaultPayType");

                    b.Property<Guid?>("DefaultPriceId");

                    b.Property<Guid?>("DefaultStoreId");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("NoPostToStores");

                    b.Property<bool>("NotGenerateEntry");

                    b.Property<string>("Note");

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("PreventNegativeOutput");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("ShowBranchField");

                    b.Property<bool>("ShowCostCenterldField");

                    b.Property<bool>("ShowCustomerAccountldField");

                    b.Property<bool>("ShowDiscField");

                    b.Property<bool>("ShowExtraField");

                    b.Property<bool>("ShowItemCostCenterldField");

                    b.Property<bool>("ShowItemDiscField");

                    b.Property<bool>("ShowItemExpireDateField");

                    b.Property<bool>("ShowItemExtraField");

                    b.Property<bool>("ShowItemNoteField");

                    b.Property<bool>("ShowItemPriceFields");

                    b.Property<bool>("ShowItemProductionDateField");

                    b.Property<bool>("ShowItemStoreField");

                    b.Property<bool>("ShowItemUnitField");

                    b.Property<bool>("ShowNoteField");

                    b.Property<bool>("ShowPayTypeField");

                    b.Property<bool>("ShowSellersFields");

                    b.Property<bool>("ShowStoreField");

                    b.Property<bool>("ShowTotalPriceItemField");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("BillTypes","Accounting");
                });

            modelBuilder.Entity("ERPAPI.Models.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Note");

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ParentId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Branchs","HumanResources");
                });

            modelBuilder.Entity("ERPAPI.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Companies","Management");
                });

            modelBuilder.Entity("ERPAPI.Models.ContactType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("ContactTypes","Person");
                });

            modelBuilder.Entity("ERPAPI.Models.CostCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Note");

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("ParentId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("CostCenters","Accounting");
                });

            modelBuilder.Entity("ERPAPI.Models.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("ISOCode")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PartName")
                        .HasMaxLength(128);

                    b.Property<double>("PartRate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.ToTable("Currencies","Accounting");
                });

            modelBuilder.Entity("ERPAPI.Models.CurrencyHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CurrencyId");

                    b.Property<double>("CurrencyValue");

                    b.Property<DateTimeOffset?>("EndtDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CurrencyHistories","Accounting");
                });

            modelBuilder.Entity("ERPAPI.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<Guid>("CustomerTypeId");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Note");

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Status");

                    b.Property<short>("VIP");

                    b.HasKey("Id");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Customers","Marketing");
                });

            modelBuilder.Entity("ERPAPI.Models.CustomerContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adjective")
                        .HasMaxLength(128);

                    b.Property<string>("Contact");

                    b.Property<Guid>("ContactTypeId");

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<Guid>("CustomerId");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("FirstName")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDefault");

                    b.Property<string>("LastName")
                        .HasMaxLength(128);

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerContacts","Marketing");
                });

            modelBuilder.Entity("ERPAPI.Models.CustomerType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowEditCustomerAccountName");

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<Guid?>("DefaultCustomerPriceId");

                    b.Property<Guid?>("DefaultParentAccountId");

                    b.Property<bool>("DefaultWithCreateAccount");

                    b.Property<bool>("DefaultWithCreateContact");

                    b.Property<int>("EntityStatus");

                    b.Property<bool>("GenerateCustomerAccountNameAutomatically");

                    b.Property<bool>("GenerateCustomerAccountNameWithCityName");

                    b.Property<bool>("GenerateCustomerAccountNameWithCustomerTypeName");

                    b.Property<bool>("GenerateCustomerAccountNameWithNeighborhoodName");

                    b.Property<bool>("GenerateCustomerAccountNameWithProvinceName");

                    b.Property<bool>("GenerateCustomerAccountNameWithStreetName");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Note");

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("PreventRepeatCustomer");

                    b.Property<bool>("PreventRepeatCustomerContact");

                    b.Property<short?>("PreventRepeatCustomerInAreaType");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CustomerTypes","Marketing");
                });

            modelBuilder.Entity("ERPAPI.Models.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchId");

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<Guid>("CurrencyId");

                    b.Property<double>("CurrencyValue");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<int>("EntityStatus");

                    b.Property<int>("EntryOrigin");

                    b.Property<Guid>("FinancialPeriodId");

                    b.Property<bool>("IsPosted");

                    b.Property<string>("Note");

                    b.Property<long>("Number");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FinancialPeriodId");

                    b.HasIndex("Number", "FinancialPeriodId")
                        .IsUnique();

                    b.ToTable("Entries","Accounting");
                });

            modelBuilder.Entity("ERPAPI.Models.EntryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AccountId");

                    b.Property<Guid?>("CostCenterId");

                    b.Property<double>("Credit");

                    b.Property<Guid>("CurrencyId");

                    b.Property<double>("CurrencyValue");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<double>("Debit");

                    b.Property<Guid>("EntryId");

                    b.Property<string>("Note");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EntryId");

                    b.ToTable("EntryItems","Accounting");
                });

            modelBuilder.Entity("ERPAPI.Models.FinancialPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyId");

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<DateTimeOffset>("EndtDate");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Order");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset>("StartDate");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("FinancialPeriods","Management");
                });

            modelBuilder.Entity("ERPAPI.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<int>("EntityStatus");

                    b.Property<Guid>("ItemGroupId");

                    b.Property<double?>("MaxLimit");

                    b.Property<double?>("MinLimit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Note");

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("ReOrderLimit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ItemGroupId");

                    b.ToTable("Items","Production");
                });

            modelBuilder.Entity("ERPAPI.Models.ItemGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Note");

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ParentId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ItemGroups","Production");
                });

            modelBuilder.Entity("ERPAPI.Models.ItemUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(128);

                    b.Property<double>("Factor");

                    b.Property<bool>("IsDefault");

                    b.Property<Guid>("ItemId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UnitId");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.HasIndex("ItemId", "UnitId")
                        .IsUnique();

                    b.ToTable("ItemUnits","Production");
                });

            modelBuilder.Entity("ERPAPI.Models.ItemUnitPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("EndDate");

                    b.Property<Guid>("ItemUnitId");

                    b.Property<Guid>("PriceId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("StartDate");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("PriceId");

                    b.HasIndex("ItemUnitId", "PriceId")
                        .IsUnique();

                    b.ToTable("ItemUnitPrices","Production");
                });

            modelBuilder.Entity("ERPAPI.Models.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<DateTimeOffset?>("DeletedDateTime");

                    b.Property<Guid?>("DeletedUserId");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<Guid?>("ModifiedUserId");

                    b.Property<string>("Object");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("TableId");

                    b.Property<int>("TableType");

                    b.HasKey("Id");

                    b.ToTable("Logs","Management");
                });

            modelBuilder.Entity("ERPAPI.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchId");

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<Guid>("CustomerId");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<DateTimeOffset?>("DeliveryDate");

                    b.Property<DateTimeOffset>("DueDate");

                    b.Property<int>("EntityStatus");

                    b.Property<Guid>("FinancialPeriodId");

                    b.Property<long>("Number");

                    b.Property<Guid>("OrderTypeId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FinancialPeriodId");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("StoreId");

                    b.ToTable("Orders","Marketing");
                });

            modelBuilder.Entity("ERPAPI.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BillItemId");

                    b.Property<Guid>("ItemUnitId");

                    b.Property<Guid>("OrderId");

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("BillItemId");

                    b.HasIndex("ItemUnitId");

                    b.HasIndex("OrderId", "ItemUnitId")
                        .IsUnique();

                    b.ToTable("OrderItems","Marketing");
                });

            modelBuilder.Entity("ERPAPI.Models.OrderType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<Guid?>("DefaultBranchId");

                    b.Property<Guid?>("DefaultStoreId");

                    b.Property<int>("EntityStatus");

                    b.Property<bool>("IsCurrentUserMarketer");

                    b.Property<int?>("MarketersNumber");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("NoEditFirstLastCustomerOrderDate");

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("OrderTypeOrder");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("ShowBranshField");

                    b.Property<bool>("ShowStoreField");

                    b.Property<bool>("WithAutoPostToStore");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes","Marketing");
                });

            modelBuilder.Entity("ERPAPI.Models.PayEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<int>("EntityStatus");

                    b.Property<Guid>("EntryId");

                    b.Property<long>("Number");

                    b.Property<Guid?>("PayAccountId");

                    b.Property<Guid>("PayTypeId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("EntryId")
                        .IsUnique();

                    b.HasIndex("PayAccountId");

                    b.HasIndex("PayTypeId");

                    b.ToTable("PayEntries","Accounting");
                });

            modelBuilder.Entity("ERPAPI.Models.PayType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AutoPostToAccounts");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("Color1");

                    b.Property<int?>("Color2");

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<string>("CreditFieldName");

                    b.Property<string>("DebitFieldName");

                    b.Property<Guid?>("DefaultAccountId");

                    b.Property<Guid?>("DefaultBranchId");

                    b.Property<Guid?>("DefaultCostCenterId");

                    b.Property<Guid?>("DefaultCurrencyId");

                    b.Property<int>("EntityStatus");

                    b.Property<bool>("IsBeginEntry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PayTypeOrder");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("ShowBranchField");

                    b.Property<bool>("ShowCostCenterldField");

                    b.Property<bool>("ShowItemCostCenterldField");

                    b.Property<bool>("ShowItemCreditField");

                    b.Property<bool>("ShowItemCurrencyField");

                    b.Property<bool>("ShowItemDebitField");

                    b.Property<bool>("ShowItemNoteField");

                    b.HasKey("Id");

                    b.ToTable("PayTypes","Accounting");
                });

            modelBuilder.Entity("ERPAPI.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("TableId");

                    b.Property<int>("TableType");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Permissions","CMS");
                });

            modelBuilder.Entity("ERPAPI.Models.PermissionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("PermissionGroups","CMS");
                });

            modelBuilder.Entity("ERPAPI.Models.PermissionGroupPermisson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("PermissionGroupId");

                    b.Property<Guid>("PermissionId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("PermissionGroupId", "PermissionId")
                        .IsUnique();

                    b.ToTable("PermissionGroupPermissions","CMS");
                });

            modelBuilder.Entity("ERPAPI.Models.PermissionGroupRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("PermissionGroupId");

                    b.Property<Guid>("RoleId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("PermissionGroupId", "RoleId")
                        .IsUnique();

                    b.ToTable("PermissionGroupRoles","CMS");
                });

            modelBuilder.Entity("ERPAPI.Models.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Prices","Production");
                });

            modelBuilder.Entity("ERPAPI.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles","CMS");
                });

            modelBuilder.Entity("ERPAPI.Models.Seller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Note");

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("ParentId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Sellers","Accounting");
                });

            modelBuilder.Entity("ERPAPI.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AccountId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<Guid?>("CostCenterId");

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Note");

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ParentId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("ParentId");

                    b.ToTable("Stores","Production");
                });

            modelBuilder.Entity("ERPAPI.Models.StoreItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("EndDate");

                    b.Property<Guid>("FinancialPeriodId");

                    b.Property<Guid>("ItemId");

                    b.Property<double?>("MaxLimit");

                    b.Property<double?>("MinLimit");

                    b.Property<double>("Quantity");

                    b.Property<double?>("ReOrderLimit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset>("StartDate");

                    b.Property<Guid>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("FinancialPeriodId");

                    b.HasIndex("ItemId");

                    b.HasIndex("StoreId", "ItemId", "FinancialPeriodId")
                        .IsUnique();

                    b.ToTable("StoreItems","Production");
                });

            modelBuilder.Entity("ERPAPI.Models.StoreItemUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("EndDate");

                    b.Property<Guid>("FinancialPeriodId");

                    b.Property<Guid>("ItemUnitId");

                    b.Property<double?>("MaxLimit");

                    b.Property<double?>("MinLimit");

                    b.Property<double>("Quantity");

                    b.Property<double?>("ReOrderLimit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset>("StartDate");

                    b.Property<Guid>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("FinancialPeriodId");

                    b.HasIndex("ItemUnitId");

                    b.HasIndex("StoreId", "ItemUnitId", "FinancialPeriodId")
                        .IsUnique();

                    b.ToTable("StoreItemUnits","Production");
                });

            modelBuilder.Entity("ERPAPI.Models.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Units","Production");
                });

            modelBuilder.Entity("ERPAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users","CMS");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims","CMS");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims","CMS");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins","CMS");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles","CMS");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens","CMS");
                });

            modelBuilder.Entity("ERPAPI.Models.Account", b =>
                {
                    b.HasOne("ERPAPI.Models.Currency", "Currency")
                        .WithMany("Accounts")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Customer", "Customer")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Account", "FinalAccount")
                        .WithMany("FinalAccounts")
                        .HasForeignKey("FinalAccountId");

                    b.HasOne("ERPAPI.Models.Account", "ParentAccount")
                        .WithMany("Accounts")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("ERPAPI.Models.AccountBalance", b =>
                {
                    b.HasOne("ERPAPI.Models.Account", "Account")
                        .WithMany("AccountBalances")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.FinancialPeriod", "FinancialPeriod")
                        .WithMany("AccountBalances")
                        .HasForeignKey("FinancialPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.Bill", b =>
                {
                    b.HasOne("ERPAPI.Models.Account", "Account")
                        .WithMany("AccountBills")
                        .HasForeignKey("AccountId");

                    b.HasOne("ERPAPI.Models.BillType", "BillType")
                        .WithMany("Bills")
                        .HasForeignKey("BillTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Branch", "Branch")
                        .WithMany("Bills")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.CostCenter", "CostCenter")
                        .WithMany("Bills")
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Currency", "Currency")
                        .WithMany("Bills")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Account", "CustomerAccount")
                        .WithMany("CustomerBills")
                        .HasForeignKey("CustomerAccountId");

                    b.HasOne("ERPAPI.Models.FinancialPeriod", "FinancialPeriod")
                        .WithMany("Bills")
                        .HasForeignKey("FinancialPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Store", "Store")
                        .WithMany("Bills")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.BillEntry", b =>
                {
                    b.HasOne("ERPAPI.Models.Bill", "Bill")
                        .WithOne("BillEntry")
                        .HasForeignKey("ERPAPI.Models.BillEntry", "BillId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Entry", "Entry")
                        .WithOne("BillEntry")
                        .HasForeignKey("ERPAPI.Models.BillEntry", "EntryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.BillEntryItem", b =>
                {
                    b.HasOne("ERPAPI.Models.Account", "Account")
                        .WithMany("BillEntryItems")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Bill", "Bill")
                        .WithMany("BillEntryItems")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERPAPI.Models.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.BillItem", b =>
                {
                    b.HasOne("ERPAPI.Models.Bill", "Bill")
                        .WithMany("BillItems")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERPAPI.Models.CostCenter", "CostCenter")
                        .WithMany("BillItems")
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.ItemUnit", "ItemUnit")
                        .WithMany("BillItems")
                        .HasForeignKey("ItemUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Store", "Store")
                        .WithMany("BillItems")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.BillSeller", b =>
                {
                    b.HasOne("ERPAPI.Models.Bill", "Bill")
                        .WithMany("BillSellers")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERPAPI.Models.Seller", "Seller")
                        .WithMany("BillSellers")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.Branch", b =>
                {
                    b.HasOne("ERPAPI.Models.Branch", "ParentBranch")
                        .WithMany("Branchs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.CostCenter", b =>
                {
                    b.HasOne("ERPAPI.Models.CostCenter", "ParentCostCenter")
                        .WithMany("CostCenters")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.CurrencyHistory", b =>
                {
                    b.HasOne("ERPAPI.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.Customer", b =>
                {
                    b.HasOne("ERPAPI.Models.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.CustomerContact", b =>
                {
                    b.HasOne("ERPAPI.Models.ContactType", "ContactType")
                        .WithMany("CustomerContacts")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Customer", "Customer")
                        .WithMany("CustomerContacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.Entry", b =>
                {
                    b.HasOne("ERPAPI.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.FinancialPeriod", "FinancialPeriod")
                        .WithMany("Entries")
                        .HasForeignKey("FinancialPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.EntryItem", b =>
                {
                    b.HasOne("ERPAPI.Models.Account", "Account")
                        .WithMany("EntryItems")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Entry", "Entry")
                        .WithMany("Items")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ERPAPI.Models.FinancialPeriod", b =>
                {
                    b.HasOne("ERPAPI.Models.Company", "Company")
                        .WithMany("FinancialPeriods")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.Item", b =>
                {
                    b.HasOne("ERPAPI.Models.ItemGroup", "ItemGroup")
                        .WithMany("Items")
                        .HasForeignKey("ItemGroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.ItemGroup", b =>
                {
                    b.HasOne("ERPAPI.Models.ItemGroup", "ParentItemGroup")
                        .WithMany("Groups")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.ItemUnit", b =>
                {
                    b.HasOne("ERPAPI.Models.Item", "Item")
                        .WithMany("ItemUnits")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ERPAPI.Models.Unit", "Unit")
                        .WithMany("ItemUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.ItemUnitPrice", b =>
                {
                    b.HasOne("ERPAPI.Models.ItemUnit", "ItemUnit")
                        .WithMany("ItemUnitPrices")
                        .HasForeignKey("ItemUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Price", "Price")
                        .WithMany("ItemUnitPrices")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.Order", b =>
                {
                    b.HasOne("ERPAPI.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.FinancialPeriod", "FinancialPeriod")
                        .WithMany()
                        .HasForeignKey("FinancialPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.OrderType", "OrderType")
                        .WithMany("Orders")
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.OrderItem", b =>
                {
                    b.HasOne("ERPAPI.Models.BillItem", "BillItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("BillItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.ItemUnit", "ItemUnit")
                        .WithMany("OrderItems")
                        .HasForeignKey("ItemUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ERPAPI.Models.PayEntry", b =>
                {
                    b.HasOne("ERPAPI.Models.Entry", "Entry")
                        .WithOne("PayEntry")
                        .HasForeignKey("ERPAPI.Models.PayEntry", "EntryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Account", "PayAccount")
                        .WithMany("PayEntries")
                        .HasForeignKey("PayAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.PayType", "PayType")
                        .WithMany("PayEntries")
                        .HasForeignKey("PayTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.PermissionGroupPermisson", b =>
                {
                    b.HasOne("ERPAPI.Models.PermissionGroup", "PermissionGroup")
                        .WithMany("PermissionGroupPermissons")
                        .HasForeignKey("PermissionGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Permission", "Permission")
                        .WithMany("PermissionGroupPermissons")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.PermissionGroupRole", b =>
                {
                    b.HasOne("ERPAPI.Models.PermissionGroup", "PermissionGroup")
                        .WithMany("PermissionGroupRoles")
                        .HasForeignKey("PermissionGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Role", "Role")
                        .WithMany("PermissionGroupRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.Seller", b =>
                {
                    b.HasOne("ERPAPI.Models.Seller", "ParentSeller")
                        .WithMany("Sellers")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.Store", b =>
                {
                    b.HasOne("ERPAPI.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Store", "ParentStore")
                        .WithMany("Stores")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.StoreItem", b =>
                {
                    b.HasOne("ERPAPI.Models.FinancialPeriod", "FinancialPeriod")
                        .WithMany("StoreItems")
                        .HasForeignKey("FinancialPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Item", "Item")
                        .WithMany("StoreItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Store", "Store")
                        .WithMany("StoreItems")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ERPAPI.Models.StoreItemUnit", b =>
                {
                    b.HasOne("ERPAPI.Models.FinancialPeriod", "FinancialPeriod")
                        .WithMany("StoreItemUnits")
                        .HasForeignKey("FinancialPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.ItemUnit", "ItemUnit")
                        .WithMany("StoreItemUnits")
                        .HasForeignKey("ItemUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.Store", "Store")
                        .WithMany("StoreItemUnits")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ERPAPI.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ERPAPI.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ERPAPI.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ERPAPI.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ERPAPI.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ERPAPI.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
